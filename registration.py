import os
from dotenv import load_dotenv
from aiogram import Router, F
from aiogram.types import (
    Message, CallbackQuery,
    ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove,
    InlineKeyboardMarkup, InlineKeyboardButton
)
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from db_manager import add_registration, get_all_registrations, delete_registration

load_dotenv()
ADMIN_ID = int(os.getenv("ADMIN_ID"))

router = Router()

# –®–∞–≥–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
class RegistrationForm(StatesGroup):
    name = State()
    phone = State()
    course = State()

@router.callback_query(F.data == "register")
async def start_register(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ä–µ–±—ë–Ω–∫–∞:")
    await state.set_state(RegistrationForm.name)

@router.message(RegistrationForm.name)
async def get_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("üì± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    await state.set_state(RegistrationForm.phone)

@router.message(RegistrationForm.phone)
async def get_phone(message: Message, state: FSMContext):
    await state.update_data(phone=message.text)

    kb = ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text="–ú–µ–Ω—Ç–∞–ª—å–Ω–∞—è –∞—Ä–∏—Ñ–º–µ—Ç–∏–∫–∞")],
        [KeyboardButton(text="–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ")],
        [KeyboardButton(text="–°–ø–∏–¥–∫—É–±–∏–Ω–≥")]
    ], resize_keyboard=True)

    await message.answer("üìö –í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å:", reply_markup=kb)
    await state.set_state(RegistrationForm.course)

@router.message(RegistrationForm.course)
async def get_course(message: Message, state: FSMContext):
    await state.update_data(course=message.text)
    data = await state.get_data()

    await add_registration(data["name"], data["phone"], data["course"])

    await message.answer(
        "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–ø–∏—Å—å! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.clear()

# –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø–∏—Å–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
@router.message(F.text == "/show")
async def show_registrations(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    registrations = await get_all_registrations()

    if not registrations:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.")
        return

    for reg in registrations:
        text = (
            f"üë§ {reg['name']}\n"
            f"üì± {reg['phone']}\n"
            f"üìö {reg['course']}\n"
            f"üïí {reg['created_at'].strftime('%d.%m.%Y %H:%M')}\n"
        )
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete:{reg['id']}")]
        ])
        await message.answer(text, reply_markup=kb)

# –•–µ–Ω–¥–ª–µ—Ä —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –ø–æ –∫–Ω–æ–ø–∫–µ
@router.callback_query(F.data.startswith("delete:"))
async def delete_registration_handler(callback: CallbackQuery):
    reg_id = int(callback.data.split(":")[1])
    await delete_registration(reg_id)
    await callback.message.edit_text("‚úÖ –ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞.")
    await callback.answer()
